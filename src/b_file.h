/*============================================================================*/
/*     ____    _        _    ____    _        _   _     _         __          */
/*    / __ \   \\      //   / __ \   \\      //  | |   / /       /  \         */
/*   / /  \_\   \\    //   / /  \_\   \\    //   | |  / /       / /\ \        */
/*  / /____      \\  //   / /____      \\  //    | | / /       / /  \ \       */
/*  |  ___ \      \\//    |  ___ \      \\//     | |/ /       / /____\ \      */
/*  | /   \ \      //     | /   \ \      //      |   |       / ________ \     */
/*  \ \___/ /     //      \ \___/ /     //       | |\ \     / /        \ \    */
/*   \_____/    _//        \_____/    _//        | | \ \   / /          \ \   */
/*             |_/                   |_/         |_|  \_\ /_/            \_\  */
/*                                                                            */
/*============================================================================*/
#ifndef _B_FILE_H_
#define _B_FILE_H_
/*============================================================================*/
#include "b_pch.h"
/*============================================================================*/
typedef struct bFile bFile;
/*============================================================================*/
typedef enum 
{
	bFile_R,
	bFile_W,
	bFile_RW
} bFile_Mode;
/*============================================================================*/
typedef enum
{
	bFile_UTF8,
	bFile_UTF16,
	bFile_UTF32
} bFile_UnicodeType;
/*============================================================================*/
bFile *bFile_Open (bchar *_name, bFile_Mode _rw);
/*============================================================================*/
bbool  bFile_Read (bFile *_file, bvoid *_buffer, buint _size);
/*============================================================================*/
bchar *bFile_ReadText(bFile *_file, bFile_UnicodeType _type);
/*============================================================================*/
bbool  bFile_Write(bFile *_file, bvoid *_buffer, buint _size);
/*============================================================================*/
bbool  bFile_WriteBOM(bFile *_file, bFile_UnicodeType _type);
/*============================================================================*/
bbool  bFile_Close(bFile *_file);
/*============================================================================*/
bbool  bFile_Clear(bFile *_file);
/*============================================================================*/
buint  bFile_Size (bFile *_file);
/*============================================================================*/
#endif /* _B_FILE_H_ */